--Tablas con borrados
DROP TABLE SEDE CASCADE CONSTRAINTS;
CREATE TABLE SEDE
(OID_SE NUMBER(1) PRIMARY KEY,
direccion VARCHAR2(50), 
plazas_ocupadas NUMBER,
CONSTRAINT CHK1_Plazas_Ocupadas check(plazas_ocupadas>=0),
CONSTRAINT CHK2_Plazas_Ocupadas check(plazas_ocupadas<=30)); --RN-02 Plazas


DROP TABLE ALUMNO CASCADE CONSTRAINTS;
CREATE TABLE ALUMNO(
DNI_A VARCHAR2(9) PRIMARY KEY,
nombre_completo VARCHAR2(120), 
direccion VARCHAR2(100), 
telefono NUMBER, 
edad NUMBER(2) NOT NULL,
emailA VARCHAR2(70),
cursoInt VARCHAR2(1),
tipoC VARCHAR2(10),
tipoH VARCHAR2(10),
certificado VARCHAR2(1),
contraseñaA VARCHAR2(30),
OID_SE NUMBER,
FOREIGN KEY (OID_SE) REFERENCES SEDE ON DELETE CASCADE,
CONSTRAINT CHK_email CHECK (REGEXP_LIKE(emailA, '^[a-z0-9._-]+@[a-z0-9.-]+\.[a-z]{2,3}$')),
CONSTRAINT CHK_DNI_Alumno CHECK (REGEXP_LIKE(DNI_A, '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][A-Z]')),
CONSTRAINT CHK_THORARIO CHECK(tipoH IN ('mañana','tarde')),
CONSTRAINT CHK_TCARNE CHECK(tipoC IN( 'AM', 'A1', 'A2', 'A', 'B', 'B+E', 'C1', 'C1+E', 'D1', 'D1+E', 'D')),
CONSTRAINT CHK_Telefono_Alumno CHECK(REGEXP_LIKE(telefono, '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]')),
CONSTRAINT CHK_Edad_Alumno CHECK(edad>=17)
);


DROP TABLE TESTS CASCADE CONSTRAINTS;
CREATE TABLE TESTS
(OID_TEST NUMBER PRIMARY KEY,
fallos NUMBER, 
fecha DATE,
DNI_A VARCHAR2(9) NOT NULL,
FOREIGN KEY (DNI_A) REFERENCES ALUMNO ON DELETE CASCADE,
CONSTRAINT CHK1_Fallos_Test check(fallos <= 30 AND fallos >= 0 )
);


DROP TABLE TEORIA CASCADE CONSTRAINTS;
CREATE TABLE TEORIA
(OID_TE NUMBER PRIMARY KEY,
tema NUMBER,
fecha DATE,
DNI_P VARCHAR2 (9),
FOREIGN KEY (DNI_P) REFERENCES PROFESOR ON DELETE CASCADE,
CONSTRAINT CHK1_Numero_temas check ( tema > 0  AND tema <= 12)
);


DROP TABLE EXAMEN CASCADE CONSTRAINTS;
CREATE TABLE EXAMEN(
OID_EX NUMBER(5) PRIMARY KEY,
fecha DATE,
tipo VARCHAR2(10),
CONSTRAINT CHK_Tipo check(tipo ='teórico' OR tipo='práctico'));


DROP TABLE PRACTICA CASCADE CONSTRAINTS;
CREATE TABLE PRACTICA(
OID_PRA NUMBER PRIMARY KEY,
DNI_A VARCHAR2(9),
DNI_P VARCHAR2(9),
FOREIGN KEY (DNI_A) REFERENCES ALUMNO ON DELETE CASCADE,
FOREIGN KEY (DNI_P) REFERENCES PROFESOR ON DELETE CASCADE,
fecha DATE);

DROP TABLE PROFESOR CASCADE CONSTRAINTS;
CREATE TABLE PROFESOR(
DNI_P VARCHAR2(9) PRIMARY KEY,
nombre_completo VARCHAR2(120),
direccion VARCHAR2(50),
años_carne NUMBER(2),
emailP VARCHAR2(70),
puesto  VARCHAR2(20),
contraseñaB VARCHAR2(30),
OID_SE NUMBER,
FOREIGN KEY (OID_SE) REFERENCES SEDE ON DELETE CASCADE,
CONSTRAINT CHK_email2 CHECK (REGEXP_LIKE(emailP, '^[a-z0-9._-]+@[a-z0-9.-]+\.[a-z]{2,3}$')),
CONSTRAINT CHK_PUESTO check(puesto IN('práctico', 'teórico', 'teórico-práctico')),
CONSTRAINT CHK_Dni_profesor check(REGEXP_LIKE(DNI_P, '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][A-Z]')),
CONSTRAINT CHK_CARNE_PROFESOR check(años_carne >= 3) --RN-05
);


DROP TABLE VEHICULO CASCADE CONSTRAINTS;
CREATE TABLE VEHICULO
(matricula VARCHAR2(7) PRIMARY KEY,
modelo VARCHAR2(40),
tipo_combustible VARCHAR2(10),
tipo_vehiculo VARCHAR2(10),
tipo_estado VARCHAR2(10),
DNI_P VARCHAR2(9),
CONSTRAINT CHK_ESTADO check(tipo_estado IN('bueno', 'malo')),
CONSTRAINT CHK_COMBUSTIBLE check(tipo_combustible IN('eléctrico', 'gasolina', 'gasoil')),
CONSTRAINT CHK_VEHICULO_CHK2 check(tipo_vehiculo IN('coche', 'moto', 'ciclomotor', 'camión', 'autobús', 'remolque')),
CONSTRAINT CHK_Matricula check(REGEXP_LIKE(matricula, '[0-9][0-9][0-9][0-9][A-Z][A-Z][A-Z]')),
FOREIGN KEY (DNI_P) REFERENCES PROFESOR ON DELETE CASCADE
);


--TABLA AUXILIAR DE ALUMNOS A TEORÍA
DROP TABLE ASISTEA CASCADE CONSTRAINTS;
CREATE TABLE ASISTEA(OID_ASIS NUMBER PRIMARY KEY,
DNI_A VARCHAR2(9),
OID_TE NUMBER,
FOREIGN KEY (DNI_A) REFERENCES ALUMNO ON DELETE CASCADE,
FOREIGN KEY (OID_TE) REFERENCES TEORIA ON DELETE CASCADE
);


--TABLA AUXILIAR DE ALUMNOS A EXAMEN
DROP TABLE HACEREX CASCADE CONSTRAINTS;
CREATE TABLE HACEREX(OID_HACER NUMBER PRIMARY KEY,
DNI_A VARCHAR2(9),
OID_EX NUMBER,
fallos NUMBER(2),
apto NUMBER(1),
FOREIGN KEY (DNI_A) REFERENCES ALUMNO ON DELETE CASCADE,
FOREIGN KEY (OID_EX) REFERENCES EXAMEN ON DELETE CASCADE,
CONSTRAINT CHK1_Fallos check(fallos <= 30 AND fallos >= 0 )
);

